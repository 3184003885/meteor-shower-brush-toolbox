import customtkinter
import os
import sys
import shutil
import ctypes
from functions.device_info import DeviceInfoBar
import threading
from config.version import VERSION, INTRO_TEXT
from tkinter import messagebox 
import json
import platform
import datetime

def check_disk_space():
    system_drive = os.environ.get('SystemDrive', 'C:')
    exe_path = os.path.abspath(sys.argv[0])
    program_drive = os.path.splitdrive(exe_path)[0] + '\\'
    sys_total, sys_used, sys_free = shutil.disk_usage(system_drive + '\\')
    prog_total, prog_used, prog_free = shutil.disk_usage(program_drive)
    min_gb = 2
    if sys_free < min_gb * 1024**3:
        messagebox.showwarning("Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥", f"Á≥ªÁªüÁõò({system_drive}) Ââ©‰ΩôÁ©∫Èó¥‰∏çË∂≥ {min_gb}GBÔºåÂΩìÂâç‰∏∫ {sys_free // (1024**3)} GB")
    if prog_free < min_gb * 1024**3:
        messagebox.showwarning("Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥", f"Â∑•ÂÖ∑ÁÆ±ÊâÄÂú®Áõò({program_drive}) Ââ©‰ΩôÁ©∫Èó¥‰∏çË∂≥ {min_gb}GBÔºåÂΩìÂâç‰∏∫ {prog_free // (1024**3)} GB")

def hide_console():
    if sys.platform == "win32":
        whnd = ctypes.windll.kernel32.GetConsoleWindow()
        if whnd != 0:
            ctypes.windll.user32.ShowWindow(whnd, 0)  

class App(customtkinter.CTk):
    def __init__(self):
        check_disk_space()  
        super().__init__()  
        self.warning_label = None
        self.title("ÊµÅÊòüÈõ®Â∑•ÂÖ∑ÁÆ±,QQ3184003885,Áæ§1045528316,ÁâàÊú¨:ÂÖçË¥πÁ¶ªÁ∫øÁâà")
        self._update_title_with_identity_and_time()
        self.geometry("1200x700")  
        self.minsize(1000, 600)
        self.grid_rowconfigure(0, weight=1) 
        self.grid_columnconfigure(1, weight=4)  
        self.grid_columnconfigure(2, weight=1) 
        self.sidebar_frame = customtkinter.CTkFrame(self, width=220, corner_radius=0)
        self.sidebar_frame.grid(row=0, column=0, sticky="nsew") 
        self.logo_label = customtkinter.CTkLabel(
            self.sidebar_frame, 
            text="ÂäüËÉΩËèúÂçï", 
            font=("ÂæÆËΩØÈõÖÈªë", 20, "bold")  
        )
        self.logo_label.grid(row=0, column=0, padx=20, pady=(20, 10))
        self.menu_buttons = [
            ("‰∏ªÈ°µ", self.show_main_dashboard, "üè†", True),
            ("fastbootÂ∑•ÂÖ∑", self.show_fastboot_menu, "üì±", True),
            ("ADBÂ∑•ÂÖ∑", self.show_adb_menu, "‚ö°", True),
            ("ÂÖ∂‰ªñÂ∑•ÂÖ∑", self.show_other_tools, "üîß", True),
            ("ÂÖ≥‰∫é", self.show_about, "‚ÑπÔ∏è", True)
        ]
        self.menu_button_widgets = []  
        for i, (text, command, icon, show_when_not_login) in enumerate(self.menu_buttons, 1):
            button = customtkinter.CTkButton(
                self.sidebar_frame,
                text=f"{icon} {text}",
                command=command,
                width=180, 
                height=40, 
                font=("ÂæÆËΩØÈõÖÈªë", 13),
                state="normal"
            )
            button.grid(row=i, column=0, padx=20, pady=6)
            self.menu_button_widgets.append((button, True, i))
        self.main_frame = customtkinter.CTkFrame(self)
        self.main_frame.grid(row=0, column=1, sticky="nsew", padx=20, pady=20)

        self.device_info = DeviceInfoBar(self)

        self.show_main_dashboard()
        
        self.after(500, self.initial_check)
        self.check_user_agreement()
        
        hide_console()
        
        log_frame = customtkinter.CTkFrame(self)
        log_frame.grid(row=0, column=2, sticky="nsew", padx=(0, 20), pady=20)

        log_header = customtkinter.CTkFrame(log_frame)
        log_header.pack(fill="x", padx=10, pady=5)

        customtkinter.CTkLabel(
            log_header,
            text="Êìç‰ΩúÊó•Âøó",
            font=("ÂæÆËΩØÈõÖÈªë", 12, "bold")
        ).pack(side="left")

        customtkinter.CTkButton(
            log_header,
            text="Ê∏ÖÁ©∫Êó•Âøó",
            command=self.clear_log,
            width=60,
            height=24,
            font=("ÂæÆËΩØÈõÖÈªë", 10)
        ).pack(side="right", padx=5)

        self.log_text = customtkinter.CTkTextbox(
            log_frame,
            font=("Consolas", 11)
        )
        self.log_text.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
    def _update_title_with_identity_and_time(self):
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        base_title = "ÊµÅÊòüÈõ®Â∑•ÂÖ∑ÁÆ±,QQ3184003885,Áæ§1045528316,ÁâàÊú¨:ÂÖçË¥πÁ¶ªÁ∫øÁâà"
        self.title(f"{base_title} | Êó∂Èó¥: {now}")
        self.after(1000, self._update_title_with_identity_and_time)

    def check_user_agreement(self):
        import os
        agreement_file = os.path.join("data", "user_agreement_accepted.json")
        if not os.path.exists("data"):
            os.makedirs("data", exist_ok=True)
        agreed = False
        if os.path.exists(agreement_file):
            try:
                with open(agreement_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    agreed = data.get("accepted", False)
            except Exception:
                agreed = False
        if not agreed:
            self.show_user_agreement_dialog(agreement_file)

    def show_user_agreement_dialog(self, agreement_file):
        agreement_text = (
            "ÊµÅÊòüÈõ®Â∑•ÂÖ∑ÁÆ± Áî®Êà∑Â£∞Êòé\n\n"
            "1. Êú¨Â∑•ÂÖ∑ÁÆ±‰ªÖ‰æõÂÆâÂçìËÆæÂ§áÁà±Â•ΩËÄÖËøõË°åËÆæÂ§áÁÆ°ÁêÜ„ÄÅÂà∑Êú∫„ÄÅÂàÜÂå∫Êìç‰Ωú„ÄÅÊñá‰ª∂ÁÆ°ÁêÜ„ÄÅËµÑÊ∫ê‰∏ãËΩΩÁ≠âÂêàÊ≥ïÁî®ÈÄî„ÄÇ\n"
            "2. ËØ∑ÂãøÂà©Áî®Êú¨Â∑•ÂÖ∑ÁÆ±ËøõË°å‰ªª‰ΩïËøùÊ≥ïËøùËßÑÊ¥ªÂä®ÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÁªïËøáËÆæÂ§áÂÆâÂÖ®„ÄÅÁ†¥Ëß£„ÄÅÂà∑ÂÜôÈùûÊ≥ïÂõ∫‰ª∂„ÄÅ‰æµÁäØ‰ªñ‰∫∫ÊùÉÁõäÁ≠â„ÄÇ\n"
            "3. Âà∑Êú∫„ÄÅÂàÜÂå∫„ÄÅÊï∞ÊçÆÊìç‰ΩúÁ≠âÂäüËÉΩÂÖ∑Êúâ‰∏ÄÂÆöÈ£éÈô©ÔºåÂèØËÉΩÂØºËá¥ËÆæÂ§áÊï∞ÊçÆ‰∏¢Â§±„ÄÅÂèòÁ†ñ„ÄÅ‰øù‰øÆÂ§±ÊïàÁ≠âÂêéÊûú„ÄÇËØ∑Âú®Êìç‰ΩúÂâçÂ§á‰ªΩÈáçË¶ÅÊï∞ÊçÆÔºåÂπ∂Á°Æ‰øùÂ∑≤ÂÖÖÂàÜ‰∫ÜËß£Áõ∏ÂÖ≥È£éÈô©„ÄÇ\n"
            "4. Êú¨Â∑•ÂÖ∑ÁÆ±ÈÉ®ÂàÜÂäüËÉΩÊ∂âÂèäÁ¨¨‰∏âÊñπËµÑÊ∫ê‰∏ãËΩΩ„ÄÅÁΩëÁªúÊ£ÄÊµãÁ≠âÔºåÁõ∏ÂÖ≥ÂÜÖÂÆπÁî±Á¨¨‰∏âÊñπÊèê‰æõÔºåÂ∑•ÂÖ∑ÁÆ±‰∏çÂØπÂÖ∂ÂêàÊ≥ïÊÄß„ÄÅÂèØÁî®ÊÄßË¥üË¥£„ÄÇ\n"
            "5. Êú¨Â∑•ÂÖ∑ÁÆ±‰∏∫ÂÖçË¥πÂ∑•ÂÖ∑Ôºå‰∏•Á¶ÅÂïÜÁî®„ÄÅÂÄíÂçñ„ÄÅ‰∫åÊ¨°ÂºÄÂèë„ÄÅ‰º†Êí≠Á†¥Ëß£ÁâàÊú¨Á≠âË°å‰∏∫„ÄÇ\n"
            "6. ‰ΩøÁî®Êú¨Â∑•ÂÖ∑ÁÆ±Âç≥Ë°®Á§∫ÊÇ®Â∑≤Áü•ÊÇâÂπ∂ÂêåÊÑè‰∏äËø∞Â£∞ÊòéÔºåÂõ†‰ΩøÁî®Êú¨Â∑•ÂÖ∑ÁÆ±ÈÄ†ÊàêÁöÑ‰ªª‰ΩïÂêéÊûúÁî±Áî®Êà∑Ëá™Ë°åÊâøÊãÖÔºåÂºÄÂèëËÄÖ‰∏çÊâøÊãÖ‰ªª‰ΩïÊ≥ïÂæãË¥£‰ªª„ÄÇ\n"
            "7. Â¶ÇÊúâÁñëÈóÆÊàñÂª∫ËÆÆÔºåËØ∑ËÅîÁ≥ª‰ΩúËÄÖÊàñÂä†ÂÖ•ÂÆòÊñπ‰∫§ÊµÅÁæ§Ëé∑ÂèñÂ∏ÆÂä©„ÄÇ\n"
            "\n‰ΩúËÄÖQQÔºö3184003885\nÂÆòÊñπÁæ§Ôºö1045528316\n"
            "\n‰Ω†ÊòØÂê¶ÂêåÊÑèÂπ∂ÁªßÁª≠‰ΩøÁî®Êú¨Â∑•ÂÖ∑ÁÆ±Ôºü"
        )
        dialog = customtkinter.CTkToplevel(self)
        dialog.title("Áî®Êà∑Â£∞Êòé")
        dialog.geometry("600x480")
        dialog.grab_set()
        dialog.attributes('-topmost', True)
        customtkinter.CTkLabel(
            dialog,
            text="Áî®Êà∑Â£∞Êòé",
            font=("ÂæÆËΩØÈõÖÈªë", 20, "bold")
        ).pack(pady=15)
        text_box = customtkinter.CTkTextbox(
            dialog,
            font=("ÂæÆËΩØÈõÖÈªë", 13),
            height=320,
            wrap="word"
        )
        text_box.pack(fill="both", expand=True, padx=20, pady=10)
        text_box.insert("end", agreement_text)
        text_box.configure(state="disabled")
        btn_frame = customtkinter.CTkFrame(dialog)
        btn_frame.pack(pady=20)
        def accept():
            with open(agreement_file, "w", encoding="utf-8") as f:
                json.dump({"accepted": True}, f)
            dialog.destroy()
        def reject():
            dialog.destroy()
            self.destroy()
            sys.exit(0)
        countdown_var = customtkinter.StringVar(value="(15ÁßíÂêéÂèØÂêåÊÑè)")
        accept_btn = customtkinter.CTkButton(
            btn_frame,
            text="ÂêåÊÑèÂπ∂ÁªßÁª≠",
            command=None,
            width=160,
            font=("ÂæÆËΩØÈõÖÈªë", 14),
            state="disabled"
        )
        accept_btn.pack(side="left", padx=20)
        customtkinter.CTkButton(
            btn_frame,
            text="‰∏çÂêåÊÑè/ÈÄÄÂá∫",
            command=reject,
            width=160,
            fg_color="#FF4444",
            hover_color="#CC3333",
            font=("ÂæÆËΩØÈõÖÈªë", 14)
        ).pack(side="left", padx=20)
        countdown_label = customtkinter.CTkLabel(
            btn_frame,
            textvariable=countdown_var,
            font=("ÂæÆËΩØÈõÖÈªë", 12),
            text_color="gray"
        )
        countdown_label.pack(side="left", padx=10)
        def enable_accept():
            accept_btn.configure(state="normal", command=accept)
            countdown_var.set("")
        def countdown(t=15):
            if t > 0:
                countdown_var.set(f"({t}ÁßíÂêéÂèØÂêåÊÑè)")
                dialog.after(1000, lambda: countdown(t-1))
            else:
                enable_accept()
        countdown(15)
        dialog.wait_window()

    def initial_check(self):
        import requests
        import shutil
        import tkinter.messagebox as messagebox
        try:
            total, used, free = shutil.disk_usage("C:\\")
            free_gb = free / (1024 ** 3)
            if free_gb < 30:
                self.add_log(f"CÁõòÂâ©‰ΩôÁ©∫Èó¥‰∏çË∂≥Ôºö{free_gb:.2f}GB")
                messagebox.showerror("Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥", f"CÁõòÂâ©‰ΩôÁ©∫Èó¥‰ªÖ {free_gb:.2f}GBÔºåÂª∫ËÆÆËá≥Â∞ë‰øùÁïô30GBÁ©∫Èó¥ÔºÅ")
            else:
                self.add_log(f"CÁõòÂâ©‰ΩôÁ©∫Èó¥Ôºö{free_gb:.2f}GB")
        except Exception as e:
            self.add_log(f"CÁõòÁ©∫Èó¥Ê£ÄÊµãÂ§±Ë¥•: {str(e)}")
            messagebox.showwarning("Á£ÅÁõòÊ£ÄÊµã", f"CÁõòÁ©∫Èó¥Ê£ÄÊµãÂ§±Ë¥•: {str(e)}")

    def show_main_dashboard(self):
        """ÊòæÁ§∫‰∏ªÊéßÂà∂Âè∞"""
        self.clear_main_frame()

        welcome_frame = customtkinter.CTkFrame(self.main_frame)
        welcome_frame.pack(fill="x", padx=30, pady=20)

        customtkinter.CTkLabel(
            welcome_frame,
            text="Ê¨¢Ëøé‰ΩøÁî®ÊµÅÊòüÈõ®Â∑•ÂÖ∑ÁÆ±",
            font=("ÂæÆËΩØÈõÖÈªë", 24, "bold")
        ).pack(pady=20)

        info_frame = customtkinter.CTkFrame(self.main_frame)
        info_frame.pack(fill="both", expand=True, padx=30, pady=20)

        customtkinter.CTkLabel(
            info_frame,
            text=INTRO_TEXT,  
            font=("ÂæÆËΩØÈõÖÈªë", 14),
            justify="left"
        ).pack(padx=20, pady=20)

        version_label = customtkinter.CTkLabel(
            self.main_frame,
            text=f"ÁâàÊú¨: {VERSION}",
            font=("ÂæÆËΩØÈõÖÈªë", 12),
            text_color="gray"
        )
        version_label.pack(side="bottom", pady=10)

    def update_device_status(self):
        """Êõ¥Êñ∞ËÆæÂ§áÁä∂ÊÄÅÊòæÁ§∫"""
        pass

    def show_flash_menu(self):
        self.clear_main_frame()

    def show_app_menu(self):
        self.clear_main_frame()

    def show_adb_menu(self):
        self.clear_main_frame()

        customtkinter.CTkLabel(
            self.main_frame,
            text="ADB Â∑•ÂÖ∑ÈõÜ",
            font=("ÂæÆËΩØÈõÖÈªë", 24, "bold")
        ).pack(pady=20)

        tools_frame = customtkinter.CTkFrame(self.main_frame)
        tools_frame.pack(fill="both", expand=True, padx=30, pady=20)

        tools = [
            ("Êñá‰ª∂ÁÆ°ÁêÜ", "üìÇ", self.show_file_manager),
            ("ÂÆâË£ÖÂ∫îÁî®", "üì•", self.show_app_installer),
            ("Â∫îÁî®ÁÆ°ÁêÜ", "üì±", self.show_app_manager),
            ("ShellÁªàÁ´Ø", "üíª", self.show_shell_terminal),
        ]

        for i, (text, icon, command) in enumerate(tools):
            row = i // 2
            col = i % 2
            
            tool_btn = customtkinter.CTkButton(
                tools_frame,
                text=f"{icon} {text}",
                command=command,
                width=250,
                height=80,
                font=("ÂæÆËΩØÈõÖÈªë", 16)
            )
            tool_btn.grid(row=row, column=col, padx=15, pady=15, sticky="nsew")

        tools_frame.grid_columnconfigure(0, weight=1)
        tools_frame.grid_columnconfigure(1, weight=1)

    def show_scrcpy(self):  
        try:
            import subprocess
            scrcpy_path = "platform-tools\\scrcpy.exe"
            
            if not os.path.exists(scrcpy_path):
                self.add_log("Êú™ÊâæÂà∞ÊäïÂ±èÁ®ãÂ∫è scrcpy.exeÔºåËØ∑Â∞Ü scrcpy.exe ÊîæÂÖ• platform-tools Êñá‰ª∂Â§π")
                messagebox.showerror("ÈîôËØØ", "Êú™ÊâæÂà∞ÊäïÂ±èÁ®ãÂ∫èÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®")
                return

            result = subprocess.run(
                ["platform-tools\\adb.exe", "devices"],
                capture_output=True,
                text=True,
                encoding='utf-8'
            )
            
            if len(result.stdout.strip().splitlines()) <= 1:
                self.add_log("Êú™Ê£ÄÊµãÂà∞ËÆæÂ§áËøûÊé•ÔºåËØ∑Á°Æ‰øùËÆæÂ§áÂ∑≤ËøûÊé•Âπ∂ÂºÄÂêØ USB Ë∞ÉËØï")
                messagebox.showerror("ÈîôËØØ", "Êú™Ê£ÄÊµãÂà∞ËÆæÂ§áËøûÊé•")
                return

            self.add_log("Ê≠£Âú®ÂêØÂä®ÊäïÂ±èÁ®ãÂ∫è...")
            
            process = subprocess.Popen(
                [scrcpy_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                encoding='utf-8'
            )

            try:
                return_code = process.wait(timeout=1)
                if return_code != 0:
                    stderr_output = process.stderr.read() if process.stderr else "Êú™Áü•ÈîôËØØ"
                    self.add_log(f"ÊäïÂ±èÂêØÂä®Â§±Ë¥•: {stderr_output}")
                    messagebox.showerror("ÈîôËØØ", f"ÊäïÂ±èÂêØÂä®Â§±Ë¥•: {stderr_output}")
                    return
            except subprocess.TimeoutExpired:
                self.add_log("ÊäïÂ±èÁ®ãÂ∫èÂ∑≤ÊàêÂäüÂêØÂä®")
                
        except Exception as e:
            error_msg = f"ÂêØÂä®ÊäïÂ±èÂ§±Ë¥•: {str(e)}"
            self.add_log(error_msg)
            messagebox.showerror("ÈîôËØØ", error_msg)

    def show_file_manager(self):
        from functions.file_manager import FileManager
        manager = FileManager(self)
        manager.manage_files()

    def show_fastboot_menu(self):
        self.clear_main_frame()
        import requests
        scroll_container = customtkinter.CTkScrollableFrame(
            self.main_frame,
            label_text="FastBoot Â∑•ÂÖ∑ÈõÜ",
            label_font=("ÂæÆËΩØÈõÖÈªë", 24, "bold")
        )
        scroll_container.pack(fill="both", expand=True, padx=20, pady=20)

        oplus_frame = customtkinter.CTkFrame(scroll_container)
        oplus_frame.pack(fill="x", padx=10, pady=10)
        customtkinter.CTkLabel(
            oplus_frame,
            text="Ê¨ßÂä†ÁúüÂà∑Êú∫",
            font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        ).pack(pady=10)
        customtkinter.CTkButton(
            oplus_frame,
            text="ËøõÂÖ•Ê¨ßÂä†ÁúüÂà∑Êú∫ÂäüËÉΩ",
            command=self.show_oplus_flash,  
            width=200,
            height=50,
            font=("ÂæÆËΩØÈõÖÈªë", 14)
        ).pack(pady=10)

        xiaomi_frame = customtkinter.CTkFrame(scroll_container)
        xiaomi_frame.pack(fill="x", padx=10, pady=10)
        
        customtkinter.CTkLabel(
            xiaomi_frame,
            text="Â∞èÁ±≥Á∫øÂà∑Â∑•ÂÖ∑",
            font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        ).pack(pady=10)
        
        customtkinter.CTkButton(
            xiaomi_frame,
            text="ÂêØÂä®Â∞èÁ±≥Á∫øÂà∑",
            command=self.show_xiaomi_flash,
            width=200,
            height=50,
            font=("ÂæÆËΩØÈõÖÈªë", 14)
        ).pack(pady=10)

        customtkinter.CTkFrame(
            scroll_container,
            height=2
        ).pack(fill="x", padx=10, pady=20)

        tools_frame = customtkinter.CTkFrame(scroll_container)
        tools_frame.pack(fill="x", padx=10, pady=10)

        customtkinter.CTkLabel(
            tools_frame,
            text="ÂàÜÂå∫ÁÆ°ÁêÜÂ∑•ÂÖ∑",
            font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        ).pack(pady=10)

        buttons_frame = customtkinter.CTkFrame(tools_frame)
        buttons_frame.pack(fill="both", expand=True, padx=20, pady=10)

        customtkinter.CTkButton(
            buttons_frame,
            text="ËøõÂÖ•ÂàÜÂå∫ÁÆ°ÁêÜ",
            command=self.show_partition_manager,
            width=220,
            height=60,
            font=("ÂæÆËΩØÈõÖÈªë", 15)
        ).pack(pady=10)

        customtkinter.CTkLabel(
            buttons_frame,
            text="ÂÆûÊó∂ÊòæÁ§∫ËÆæÂ§áÂàÜÂå∫‰ø°ÊÅØÔºåÂåÖÊã¨ÂàÜÂå∫Âêç„ÄÅÁ±ªÂûãÁ≠â„ÄÇ\nÊîØÊåÅÂàÜÂå∫Âà∑ÂÜôÂäüËÉΩ„ÄÇ",
            font=("ÂæÆËΩØÈõÖÈªë", 12),
            text_color="gray"
        ).pack(pady=5)

    def show_xiaomi_flash(self):
        self.clear_main_frame()
        from functions.xiaomi_flash import XiaomiFlash
        flash_tool = XiaomiFlash(self)
        flash_tool.show_menu()

    def show_partition_manager(self):
        from functions.fastboot_tools import FastbootTools
        fastboot = FastbootTools(self)
        fastboot.show_menu()

    def flash_partition(self, partition):
        from functions.fastboot_tools import FastbootTools
        fastboot = FastbootTools(self)
        fastboot.flash_image(partition)

    def show_env_menu(self):
        self.clear_main_frame()
        from functions.env_check import EnvCheck
        env_tool = EnvCheck(self.main_frame)  
        env_tool.show_menu()

    def show_app_installer(self):
        from functions.app_installer import AppInstaller
        installer = AppInstaller(self)
        installer.show_installer()

    def show_app_manager(self):
        from functions.app_manager import AppManager
        manager = AppManager(self)
        manager.show_menu()
        
    def show_device_status(self):
        self.clear_main_frame()

        info_container = customtkinter.CTkScrollableFrame(
            self.main_frame,
            label_text="ËÆæÂ§áËØ¶ÁªÜ‰ø°ÊÅØ",
            label_font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        )
        info_container.pack(fill="both", expand=True, padx=20, pady=20)

        from functions.device_detector import DeviceDetector
        info = DeviceDetector.get_detailed_info()  
        
        if info:
            for category, items in info.items():
            
                customtkinter.CTkLabel(
                    info_container,
                    text=category,
                    font=("ÂæÆËΩØÈõÖÈªë", 14, "bold")
                ).pack(fill="x", padx=10, pady=(15,5))
                
                category_frame = customtkinter.CTkFrame(info_container)
                category_frame.pack(fill="x", padx=10, pady=5)
                
                for key, value in items.items():
                    item_frame = customtkinter.CTkFrame(category_frame)
                    item_frame.pack(fill="x", pady=2)
                    
                    customtkinter.CTkLabel(
                        item_frame,
                        text=f"{key}:",
                        font=("ÂæÆËΩØÈõÖÈªë", 12),
                        width=150,
                        anchor="w"
                    ).pack(side="left", padx=10)
                    
                    customtkinter.CTkLabel(
                        item_frame,
                        text=str(value),
                        font=("ÂæÆËΩØÈõÖÈªë", 12),
                        anchor="w"
                    ).pack(side="left", padx=10, fill="x", expand=True)
        else:
            customtkinter.CTkLabel(
                info_container,
                text="Êú™Ê£ÄÊµãÂà∞ËÆæÂ§á\nËØ∑Ê£ÄÊü•ËøûÊé•ÂíåË∞ÉËØïÊ®°Âºè",
                font=("ÂæÆËΩØÈõÖÈªë", 14)
            ).pack(pady=30)

        customtkinter.CTkButton(
            self.main_frame,
            text="Âà∑Êñ∞‰ø°ÊÅØ",
            command=self.show_device_status,
            width=120
        ).pack(pady=10)

    def clear_main_frame(self): 
        for widget in self.main_frame.winfo_children():
            widget.destroy()

    def check_login_and_execute(self, command):
        public_commands = [
            self.show_main_dashboard,
            self.show_login,
            self.show_about,
            self.show_file_manager,
            self.show_partition_manager,
            self.show_command_tool,
            self.show_oplus_flash,  
        ]
        if command in public_commands:
            command()
            return
        restricted_commands = [
            self.show_one_click_root, 
            self.show_env_menu
        ]
        if command in restricted_commands:
            user = None
            if user.get('vip_level') not in ["Ë∂ÖÁ∫ßÁî®Êà∑", "È´òÁ∫ßÁî®Êà∑"]:
                messagebox.showwarning(
                    "ÈúÄË¶ÅÂçáÁ∫ß",
                    "Ê≠§ÂäüËÉΩ‰ªÖÂØπÈ´òÁ∫ßÁî®Êà∑ÂíåË∂ÖÁ∫ßÁî®Êà∑ÂºÄÊîæ\nËØ∑ÂçáÁ∫ßË¥¶Âè∑Âêé‰ΩøÁî®"
                )
                return
        command()

    def add_log(self, message):
        """Ê∑ªÂä†Êó•Âøó‰ø°ÊÅØ"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert("end", f"[{timestamp}] {message}\n")
        self.log_text.see("end")

    def clear_log(self):
        """Ê∏ÖÁ©∫Êó•Âøó"""
        self.log_text.delete("1.0", "end")

    def show_other_tools(self):
        """ÊòæÁ§∫ÂÖ∂‰ªñÂ∑•ÂÖ∑ÁïåÈù¢"""
        from functions.other_tools import OtherTools
        other_tools = OtherTools(self)
        other_tools.show_menu()

    def check_remote_apps(self):
        """Ê£ÄÊµãËøúÁ®ãËΩØ‰ª∂"""
        try:
            from functions.remote_detector import RemoteDetector
            detected_apps = RemoteDetector.check_remote_apps()
            
            if detected_apps:
                user = None
                
                if not user or user.get('vip_level') != "Ë∂ÖÁ∫ßÁî®Êà∑":
                    warning_text = (
                        f"‚ö†Ô∏è Ë≠¶Âëä: Ê£ÄÊµãÂà∞ËøúÁ®ãËΩØ‰ª∂ ({', '.join(detected_apps)})\n"
                        "Ê≠§Â∑•ÂÖ∑Êî∂Ë¥πÔºåÁ¶ÅÊ≠¢ÂïÜÁî®\n"
                        "ËØ∑ÂãøÁî®Ê≠§Â∑•ÂÖ∑ÂÅö‰ªª‰ΩïËøùÊ≥ïË°å‰∏∫"
                    )
                    if hasattr(self, 'warning_label') and self.warning_label:
                        self.warning_label.configure(text=warning_text, text_color="red")
                else:
                    if hasattr(self, 'warning_label') and self.warning_label:
                        self.warning_label.configure(text="")
            else:
                if hasattr(self, 'warning_label') and self.warning_label:
                    self.warning_label.configure(text="")
        except Exception as e:
            print(f"Remote app check error: {e}")
        finally:
            # ‰ΩøÁî®Êõ¥ÈïøÁöÑÊ£ÄÊµãÈó¥ÈöîÔºåÈÅøÂÖçÈ¢ëÁπÅÊ£ÄÊµã
            if not self.winfo_exists():  # Ê£ÄÊü•Á™óÂè£ÊòØÂê¶ËøòÂ≠òÂú®
                return
            self.after(30000, self.check_remote_apps)  # Êîπ‰∏∫30ÁßíÊ£ÄÊµã‰∏ÄÊ¨°

    def show_about(self):
        """ÊòæÁ§∫ÂÖ≥‰∫éÁïåÈù¢"""
        from config.about import AUTHOR_INFO, DESCRIPTION, SPONSOR_URL
        
        self.clear_main_frame()
        
        about_container = customtkinter.CTkScrollableFrame(
            self.main_frame,
            label_text="ÂÖ≥‰∫é",
            label_font=("ÂæÆËΩØÈõÖÈªë", 24, "bold")
        )
        about_container.pack(fill="both", expand=True, padx=20, pady=20)

        author_frame = customtkinter.CTkFrame(about_container)
        author_frame.pack(fill="x", padx=10, pady=10)
        
        customtkinter.CTkLabel(
            author_frame,
            text="‰ΩúËÄÖ‰ø°ÊÅØ",
            font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        ).pack(pady=10)
        
        info = AUTHOR_INFO.copy()
        
        for key, value in info.items():
            item_frame = customtkinter.CTkFrame(author_frame)
            item_frame.pack(fill="x", padx=20, pady=2)
            
            customtkinter.CTkLabel(
                item_frame,
                text=f"{key}:",
                font=("ÂæÆËΩØÈõÖÈªë", 14),
                width=100,
                anchor="w"
            ).pack(side="left", padx=10)
            
            if key == "‰∏ªÈ°µ":
                btn = customtkinter.CTkButton(
                    item_frame,
                    text=value,
                    command=lambda: self._open_url(value),
                    font=("ÂæÆËΩØÈõÖÈªë", 14),
                    fg_color="transparent",
                    text_color="#1F538D",
                    hover_color="#E5F3FF"
                )
                btn.pack(side="left", padx=10)
            else:
                customtkinter.CTkLabel(
                    item_frame,
                    text=value,
                    font=("ÂæÆËΩØÈõÖÈªë", 14),
                    anchor="w"
                ).pack(side="left", padx=10)

        desc_frame = customtkinter.CTkFrame(about_container)
        desc_frame.pack(fill="x", padx=10, pady=(20,10))
        
        customtkinter.CTkLabel(
            desc_frame,
            text="Â∑•ÂÖ∑ËØ¥Êòé",
            font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        ).pack(pady=10)
        
        customtkinter.CTkLabel(
            desc_frame,
            text=DESCRIPTION,
            font=("ÂæÆËΩØÈõÖÈªë", 14),
            justify="left",
            wraplength=600
        ).pack(padx=20, pady=10)

        sponsor_frame = customtkinter.CTkFrame(about_container)
        sponsor_frame.pack(fill="x", padx=10, pady=10)
        
        customtkinter.CTkButton(
            sponsor_frame,
            text="üíù ËµûÂä©ÊîØÊåÅ",
            command=lambda: self._open_url(SPONSOR_URL),
            font=("ÂæÆËΩØÈõÖÈªë", 14),
            fg_color="#FF6B6B",
            hover_color="#FF4444"
        ).pack(pady=10)

    def _open_url(self, url):
        """ÊâìÂºÄURLÈìæÊé•"""
        import webbrowser
        webbrowser.open(url)

    def show_partition_tools(self):
        """ÊòæÁ§∫ÂàÜÂå∫Êìç‰ΩúÂ∑•ÂÖ∑"""
        from functions.partition_tools import PartitionTools
        tools = PartitionTools(self)
        tools.show_menu()

    def show_gki_flash(self):
        """ÊòæÁ§∫GKIÂà∑ÂÖ•ÁïåÈù¢"""
        from functions.gki_flash import GKIFlash
        gki_tool = GKIFlash(self)
        gki_tool.show_menu()

    def show_shell_terminal(self):
        """ÊòæÁ§∫ÂÆâÂçìShellÁªàÁ´ØÁïåÈù¢"""
        terminal_window = customtkinter.CTkToplevel(self)
        terminal_window.title("ÂÆâÂçìShellÁªàÁ´Ø")
        terminal_window.geometry("800x600")
        terminal_window.minsize(600, 400)
        
        terminal_window.attributes('-topmost', True)
        terminal_window.focus_force()
        
        main_frame = customtkinter.CTkFrame(terminal_window)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        title_label = customtkinter.CTkLabel(
            main_frame,
            text="ÂÆâÂçìShellÁªàÁ´Ø",
            font=("ÂæÆËΩØÈõÖÈªë", 16, "bold")
        )
        title_label.pack(pady=(10, 5))
        
        status_frame = customtkinter.CTkFrame(main_frame)
        status_frame.pack(fill="x", padx=10, pady=5)
        
        status_label = customtkinter.CTkLabel(
            status_frame,
            text="Ê≠£Âú®Ê£ÄÊµãËÆæÂ§á...",
            font=("ÂæÆËΩØÈõÖÈªë", 12),
            text_color="orange"
        )
        status_label.pack(pady=5)
        
        output_frame = customtkinter.CTkFrame(main_frame)
        output_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        output_label = customtkinter.CTkLabel(
            output_frame,
            text="ÁªàÁ´ØËæìÂá∫",
            font=("ÂæÆËΩØÈõÖÈªë", 12, "bold")
        )
        output_label.pack(pady=5)
        
        output_text = customtkinter.CTkTextbox(
            output_frame,
            font=("Consolas", 11),
            wrap="word"
        )
        output_text.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        input_frame = customtkinter.CTkFrame(main_frame)
        input_frame.pack(fill="x", padx=10, pady=5)
        
        input_label = customtkinter.CTkLabel(
            input_frame,
            text="ËæìÂÖ•ÂëΩ‰ª§:",
            font=("ÂæÆËΩØÈõÖÈªë", 12)
        )
        input_label.pack(pady=5)
        
        command_entry = customtkinter.CTkEntry(
            input_frame,
            placeholder_text="ËæìÂÖ•shellÂëΩ‰ª§ÔºåÂ¶Ç: ls, pwd, cat /proc/version Á≠â",
            font=("Consolas", 11)
        )
        command_entry.pack(fill="x", padx=10, pady=(0, 10))
        
        button_frame = customtkinter.CTkFrame(main_frame)
        button_frame.pack(fill="x", padx=10, pady=5)
        
        def check_device():
            try:
                import subprocess
                result = subprocess.run(
                    ["platform-tools\\adb.exe", "devices"],
                    capture_output=True,
                    text=True,
                    encoding='utf-8'
                )
                
                lines = result.stdout.strip().splitlines()
                if len(lines) <= 1:
                    status_label.configure(
                        text="‚ùå Êú™Ê£ÄÊµãÂà∞ËÆæÂ§áËøûÊé•",
                        text_color="red"
                    )
                    return False
                
                connected_devices = []
                for line in lines[1:]:  
                    if line.strip() and '\tdevice' in line:
                        device_id = line.split('\t')[0]
                        connected_devices.append(device_id)
                
                if connected_devices:
                    status_label.configure(
                        text=f"‚úÖ Â∑≤ËøûÊé•ËÆæÂ§á: {', '.join(connected_devices)}",
                        text_color="green"
                    )
                    return True
                else:
                    status_label.configure(
                        text="‚ö†Ô∏è ËÆæÂ§áÊú™ÊéàÊùÉÔºåËØ∑Ê£ÄÊü•USBË∞ÉËØïÊéàÊùÉ",
                        text_color="orange"
                    )
                    return False
                    
            except Exception as e:
                status_label.configure(
                    text=f"‚ùå Ê£ÄÊµãÂ§±Ë¥•: {str(e)}",
                    text_color="red"
                )
                return False
        
        def execute_command():
            command = command_entry.get().strip()
            if not command:
                return
            
            command_entry.delete(0, "end")
            
            output_text.insert("end", f"\n$ {command}\n")
            output_text.see("end")
            
            try:
                import subprocess
                import threading
                
                def run_command():
                    try:
                        result = subprocess.run(
                            ["platform-tools\\adb.exe", "shell", command],
                            capture_output=True,
                            text=True,
                            encoding='utf-8',
                            timeout=30  # 30ÁßíË∂ÖÊó∂
                        )
                        
                        terminal_window.after(0, lambda: update_output(result))
                        
                    except subprocess.TimeoutExpired:
                        terminal_window.after(0, lambda: output_text.insert("end", "ÂëΩ‰ª§ÊâßË°åË∂ÖÊó∂\n"))
                        terminal_window.after(0, lambda: output_text.see("end"))
                    except Exception as e:
                        terminal_window.after(0, lambda: output_text.insert("end", f"ÊâßË°åÈîôËØØ: {str(e)}\n"))
                        terminal_window.after(0, lambda: output_text.see("end"))
                
                threading.Thread(target=run_command, daemon=True).start()
                
            except Exception as e:
                output_text.insert("end", f"ÊâßË°åÈîôËØØ: {str(e)}\n")
                output_text.see("end")
        
        def update_output(result):
            if result.stdout:
                output_text.insert("end", result.stdout)
            if result.stderr:
                output_text.insert("end", f"ÈîôËØØ: {result.stderr}")
            output_text.insert("end", "\n")
            output_text.see("end")
        
        def clear_output():
            output_text.delete("1.0", "end")
        
        def get_device_info():
            commands = [
                "getprop ro.product.model",
                "getprop ro.build.version.release",
                "getprop ro.build.version.sdk",
                "whoami",
                "pwd"
            ]
            
            output_text.insert("end", "=== ËÆæÂ§á‰ø°ÊÅØ ===\n")
            for cmd in commands:
                output_text.insert("end", f"$ {cmd}\n")
                try:
                    import subprocess
                    result = subprocess.run(
                        ["platform-tools\\adb.exe", "shell", cmd],
                        capture_output=True,
                        text=True,
                        encoding='utf-8',
                        timeout=5
                    )
                    if result.stdout.strip():
                        output_text.insert("end", result.stdout.strip() + "\n")
                    else:
                        output_text.insert("end", "(Êó†ËæìÂá∫)\n")
                except Exception as e:
                    output_text.insert("end", f"ÈîôËØØ: {str(e)}\n")
            output_text.insert("end", "==============\n\n")
            output_text.see("end")
        
        customtkinter.CTkButton(
            button_frame,
            text="ÊâßË°åÂëΩ‰ª§",
            command=execute_command,
            width=100,
            height=35,
            font=("ÂæÆËΩØÈõÖÈªë", 12)
        ).pack(side="left", padx=5)
        
        customtkinter.CTkButton(
            button_frame,
            text="ËÆæÂ§á‰ø°ÊÅØ",
            command=get_device_info,
            width=100,
            height=35,
            font=("ÂæÆËΩØÈõÖÈªë", 12)
        ).pack(side="left", padx=5)
        
        customtkinter.CTkButton(
            button_frame,
            text="Âà∑Êñ∞Áä∂ÊÄÅ",
            command=check_device,
            width=100,
            height=35,
            font=("ÂæÆËΩØÈõÖÈªë", 12)
        ).pack(side="left", padx=5)
        
        customtkinter.CTkButton(
            button_frame,
            text="Ê∏ÖÁ©∫ËæìÂá∫",
            command=clear_output,
            width=100,
            height=35,
            font=("ÂæÆËΩØÈõÖÈªë", 12)
        ).pack(side="left", padx=5)
        
        command_entry.bind("<Return>", lambda event: execute_command())
        
        check_device()
        
        help_text = """
=== ‰ΩøÁî®ËØ¥Êòé ===
1. Á°Æ‰øùËÆæÂ§áÂ∑≤ËøûÊé•Âπ∂ÂºÄÂêØUSBË∞ÉËØï
2. Âú®ËæìÂÖ•Ê°Ü‰∏≠ËæìÂÖ•shellÂëΩ‰ª§
3. ÊåâÂõûËΩ¶ÈîÆÊàñÁÇπÂáª"ÊâßË°åÂëΩ‰ª§"ÊåâÈíÆ
4. Â∏∏Áî®ÂëΩ‰ª§Á§∫‰æã:
   - ls: ÂàóÂá∫Êñá‰ª∂
   - pwd: ÊòæÁ§∫ÂΩìÂâçÁõÆÂΩï
   - cat /proc/version: Êü•ÁúãÁ≥ªÁªüÁâàÊú¨
   - getprop: Êü•ÁúãÁ≥ªÁªüÂ±ûÊÄß
   - pm list packages: ÂàóÂá∫Â∑≤ÂÆâË£ÖÂ∫îÁî®
   - dumpsys: Êü•ÁúãÁ≥ªÁªüÊúçÂä°‰ø°ÊÅØ
================
"""
        output_text.insert("end", help_text)
        output_text.see("end")
        
        self.add_log("ÊâìÂºÄÂÆâÂçìShellÁªàÁ´Ø")

    def show_command_tool(self):
        """ÊòæÁ§∫Ëá™ÂÆö‰πâÂëΩ‰ª§Â∑•ÂÖ∑ÁïåÈù¢"""
        from functions.other_tools import OtherTools
        other_tools = OtherTools(self)
        other_tools.show_command_tool()

    def launch_rustdesk(self):
        import os
        import webbrowser
        import requests
        exe_path = os.path.join("tools", "RustDesk.exe")
        if os.path.exists(exe_path):
            os.startfile(exe_path)
        else:
            if not os.path.exists("tools"):
                os.makedirs("tools", exist_ok=True)
            from tkinter import messagebox
            try:
                messagebox.showinfo(
                    "RustDeskÊú™ÊâæÂà∞",
                    "Êú™Ê£ÄÊµãÂà∞ tools/RustDesk.exeÔºåÊ≠£Âú®Ëá™Âä®‰∏ãËΩΩ..."
                )
                url = "https://zyz.yulovehan.top/d/1/rustdesk.exe"
                resp = requests.get(url, stream=True, timeout=30)
                total = int(resp.headers.get('content-length', 0))
                with open(exe_path, 'wb') as f:
                    downloaded = 0
                    for chunk in resp.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                if os.path.exists(exe_path) and os.path.getsize(exe_path) > 1024*1024:
                    messagebox.showinfo("‰∏ãËΩΩÂÆåÊàê", "RustDeskÂ∑≤‰∏ãËΩΩÔºåÊ≠£Âú®ÂêØÂä®...")
                    os.startfile(exe_path)
                    return
                else:
                    raise Exception("‰∏ãËΩΩÊñá‰ª∂ÂºÇÂ∏∏ÊàñËøáÂ∞è")
            except Exception as e:
                messagebox.showinfo(
                    "RustDesk‰∏ãËΩΩÂ§±Ë¥•",
                    f"Ëá™Âä®‰∏ãËΩΩÂ§±Ë¥•: {str(e)}\nÂ∞ÜÊâìÂºÄRustDeskÂÆòÁΩë‰∏ãËΩΩÈ°µÈù¢ÔºåËØ∑ÊâãÂä®‰∏ãËΩΩÂπ∂ÊîæÂÖ•toolsÁõÆÂΩï„ÄÇ"
                )
                webbrowser.open("https://rustdesk.com/zh/")

    def show_oplus_flash(self):
        from functions.oplus_flash_logic import OplusFlashLogic
        logic = OplusFlashLogic(self)
        logic.show_menu()

if __name__ == "__main__":
    import subprocess
    from functions.loading_animation import LoadingAnimation
    import shutil
    import tkinter.messagebox as messagebox

    def kill_adb_fastboot(log_func):
        for proc_name in ["adb.exe", "fastboot.exe"]:
            try:
                subprocess.run(["taskkill", "/F", "/IM", proc_name], capture_output=True)
                log_func(f"Â∑≤ÁªìÊùüËøõÁ®ã: {proc_name}")
            except Exception as e:
                log_func(f"ÁªìÊùüËøõÁ®ã{proc_name}Â§±Ë¥•: {e}")

    def check_disk_space_with_log(log_func):
        import os
        system_drive = os.environ.get('SystemDrive', 'C:')
        sys_total, sys_used, sys_free = shutil.disk_usage(system_drive + '\\')
        sys_free_gb = sys_free / (1024 ** 3)
        if sys_free_gb < 2:
            log_func(f"Á≥ªÁªüÁõò({system_drive})Ââ©‰ΩôÁ©∫Èó¥‰∏çË∂≥Ôºö{sys_free_gb:.2f}GB")
            messagebox.showerror("Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥", f"Á≥ªÁªüÁõò({system_drive})Ââ©‰ΩôÁ©∫Èó¥‰ªÖ {sys_free_gb:.2f}GBÔºåÂª∫ËÆÆËá≥Â∞ë‰øùÁïô2GBÁ©∫Èó¥ÔºÅ")
        else:
            log_func(f"Á≥ªÁªüÁõò({system_drive})Ââ©‰ΩôÁ©∫Èó¥Ôºö{sys_free_gb:.2f}GB")
        exe_path = os.path.abspath(sys.argv[0])
        program_drive = os.path.splitdrive(exe_path)[0] + '\\'
        prog_total, prog_used, prog_free = shutil.disk_usage(program_drive)
        prog_free_gb = prog_free / (1024 ** 3)
        if prog_free_gb < 2:
            log_func(f"Â∑•ÂÖ∑ÁÆ±ÊâÄÂú®Áõò({program_drive})Ââ©‰ΩôÁ©∫Èó¥‰∏çË∂≥Ôºö{prog_free_gb:.2f}GB")
            messagebox.showerror("Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥", f"Â∑•ÂÖ∑ÁÆ±ÊâÄÂú®Áõò({program_drive})Ââ©‰ΩôÁ©∫Èó¥‰ªÖ {prog_free_gb:.2f}GBÔºåÂª∫ËÆÆËá≥Â∞ë‰øùÁïô2GBÁ©∫Èó¥ÔºÅ")
        else:
            log_func(f"Â∑•ÂÖ∑ÁÆ±ÊâÄÂú®Áõò({program_drive})Ââ©‰ΩôÁ©∫Èó¥Ôºö{prog_free_gb:.2f}GB")

    loading = LoadingAnimation()
    loading.run_with_checks(lambda: check_disk_space_with_log(print))
    app = App()
    app.mainloop()